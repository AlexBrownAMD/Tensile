Parameters:
  Name: GEMM_Catalyst_15.201
  Backend: HIP
  Device: Fiji
  PrintDebug: 2
  Redo: Changed # Force None

BenchmarkProblems:
  - ProblemType:
      OperationType: GEMM
      DataType: s
      TransposeA: False
      TransposeB: True
      UseBeta: False

    InitialSolutionParameters:
      WorkGroupOrder:         -4
      ThreadTileEdge:         4
      ThreadTileShape:        0
      WorkGroupEdge:          16
      WorkGroupShape:         0
      MacroTileMaxRatio:      2
      LoopFor:                True
      LoopUnroll:             16
      LoopTail:               True
      EdgeType:               Shift
      NumLoadsParaA:          1
      NumLoadsParaB:          1
      GlobalLoadVectorWidth:  4
      LocalStoreVectorWidth:  4
      LocalLoadVectorWidth:   4
      GlobalStoreVectorWidth: 4
      LoadMacInterleave:      4
      SplitU:                 2
      Prefetch:               True
      AtomicAccumulate:       False
      KernelGrid:             [ 1, 1, 1 ]
      KernelsConcurrent:      True

    # keep benchmark as single list to make easier to modify in future
    BenchmarkCommonParameters:
      - EdgeMultiKernel: [ False ] # hardcoded
      - ProblemSizes: [ [5760], 0, 0 ]
      - MultiDevice: [ False ]
      - KernelGrid: [ [1, 1, 1] ]
      - EdgeType: [ 'Shift', 'Branch', 'None' ]
      - Interleaving: [ [4, 8], [1, 1] ]
      - ProblemSizes: [ [128] ]
      - VectorWidth: [4, 2, 1]
      - GlobalReadCoalescedA: [ True, False ]
        GlobalReadCoalescedB: [ True, False ] # do N^2 benchmark here, keep 1 result
      - WorkGroupOrdering: [ [0], [0, 4], [1, 8] ] # 0 means native dim0 first, option width
    ForkParameters:
      - WorkGroupEdge: [8, 16]
      - ThreadTileEdge: [2, 4, 6, 8]
    BenchmarkForkParameters:
      - ProblemSizes: [ [8,8,16,5760], [16,16,16,5760], [32,32,32,5760] ]
      - PreFetch: [ True, False ]
      - LoopType: [ 'For', 'DoWhile' ]
    JoinParameters:
      - MacroTile
      - DepthU
    BenchmarkJoinParameters:
      - ProblemSizes: [ [8,8,16,5760], [16,16,16,5760], [32,32,32,5760] ]
      - Unroll: [4,8] # increase the number of winners, different problems?
        SplitU: [1, 2, 4, 8 ]
    BenchmarkFinalParameters:
      ProblemSizes: [ [8,8,16,5760], [16,16,16,5760], [32,32,32,5760] ]


  #- ProblemType:
  #    OperationType: TensorContraction
  #    NumDimensionsC: 3
  #    IndexAssignmentsA: [ 0, 2, 3]
  #    IndexAssignmentsB: [ 1, 2, 3]
  #    DataType: d

  #- 


# final create problem-range -> solution mapping and encode to .yaml
Analyze:
  # parameters determining what solutions to keep, and how backend should be written

# build the actual library
Library:
  PrintDebug: 2
  # input, output
  # toolchain?, Debug/Release
  # defines

# builds a benchmarking / validation client
Client:
  builds from same library info

BenchmarkClient: # runs the benchmark client a bunch of times to produce plot data
  ProblemSizes: {1, 2, 4, 8, ...}


